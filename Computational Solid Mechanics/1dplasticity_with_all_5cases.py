# -*- coding: utf-8 -*-
"""1dplasticity_with_all_5cases.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oZoZqEGt1yGIBLrFP1d30w_INe6UB-4s
"""

import numpy as np
import matplotlib.pyplot as plt

# ------------------------------ Input & Mesh ------------------------------ #
def GetInput():
    L = 1
    nelem = 5
    x = np.linspace(0, L, nelem + 1)
    geom_Le = np.full(nelem, L / nelem)
    coordinates = np.concatenate(([0], np.cumsum(geom_Le)))
    nodes = np.arange(0, nelem + 1)
    dofs = nodes.copy()
    element = np.column_stack((np.arange(0, nelem), np.arange(1, nelem + 1)))
    dofs_element = element.copy()
    fixed_nodes = [0, len(nodes) - 1]
    T = 1
    delt = 0.001

    input_sets = [
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 0,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e10,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        }
        # {
        #     'E': 70000e6, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'delta': 150, 'sigma_u': 200e6, 'sigma_inf': 2e9
        # },
        # {
        #     'E': 2.1e11, 'K': 50000, 'H': 50000, 'eta': 5e9,
        #     'delta': 20000, 'sigma_u': 200e6, 'sigma_inf': 350e6
        # },
        # {
        #     'E': 2.1e11, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 150
        # }
    ]

    input_data = {
        'L': L, 'nelem': nelem, 'x': x, 'geom_Le': geom_Le, 'nodes': nodes,
        'dofs': dofs, 'coordinates': coordinates, 'element': element,
        'dofs_element': dofs_element, 'E': input_sets[0]['E'], 'T': T, 'delt': delt,
        'fixed_nodes': fixed_nodes, 'sigma_u': input_sets[0]['sigma_u'],
        'K': input_sets[0]['K'], 'H': input_sets[0]['H'], 'eta': input_sets[0]['eta'],
        'sigma_inf': input_sets[0]['sigma_inf'], 'delta': input_sets[0]['delta']
    }

    return input_data, input_sets

# ------------------------- NR Gamma Update ------------------------- #
def newton_raphson_plasticity(f_trial, xi, E, K, H, eta, delta_t, sigma_inf, sigma_u, delta, tolerance, max_iter, is_time_dependent, q_trial):
    gamma = 0.0
    max_iter = 50
    k = 0
    pi_dash = lambda xi: (sigma_inf - sigma_u) * (1 - np.exp(-delta * xi)) + K * xi
    pi_double_dash = lambda xi: delta * (sigma_inf - sigma_u) * np.exp(-delta * xi) + K

    if is_time_dependent:
        g = lambda gamma: f_trial - gamma * delta_t * (E + H + eta/delta_t) - (pi_dash(xi + gamma * delta_t) - pi_dash(xi))
        Dg = lambda gamma: -(E + pi_double_dash(xi + gamma * delta_t) + H + eta/delta_t) * delta_t
    else:
        g = lambda gamma: f_trial - gamma * (E + H) - (pi_dash(xi + gamma) - pi_dash(xi))
        Dg = lambda gamma: -(E + pi_double_dash(xi + gamma) + H)

    residual = g(gamma)

    while np.abs(residual) > tolerance and k < max_iter:
        gamma += -residual / Dg(gamma)
        residual = g(gamma)
        k += 1

    if k < max_iter:
        print(f"Newton-Raphson converged in {k} iterations.")
    else:
        print(f"Newton-Raphson did not converge within {max_iter} iterations.")

    print(f"Gamma value: {gamma:.6f}")

    if is_time_dependent:
      Eeptang = E * (1 - E * (E + pi_double_dash(xi + gamma * delta_t) + H + (eta/delta_t))**(-1))
      q = q_trial - (pi_dash(xi + gamma * delta_t) - pi_dash(xi))
    else:
      Eeptang = E * (1 - E * (E + pi_double_dash(xi + gamma) + H)**(-1))
      q = q_trial - (pi_dash(xi + gamma) - pi_dash(xi))

    return gamma, Eeptang, q

# ------------------------- Plasticity Update ------------------------- #
def update_plasticity_consistent(u, E, K, H, eps_plastic, xi, xi_bar, input_data, is_time_dependent, plasticity_flag):

    nelem = input_data['nelem']
    sigma_inf = input_data['sigma_inf']
    sigma_u = input_data['sigma_u']
    delta = input_data['delta']
    eta = input_data['eta']
    deltat = input_data['delt']
    L = input_data['L']
    f_int_global = np.zeros(len(input_data['nodes']))
    eps_elastic = np.zeros(nelem)
    eps_total = np.zeros(nelem)
    eps_plastic_current = eps_plastic.copy()
    sigma_new = np.zeros(nelem)
    sigma_trial = np.zeros(nelem)
    Eeptang = np.full(nelem, E)
    gamma = np.zeros(nelem)
    f_trial = np.zeros(nelem)
    q = np.zeros(nelem)
    q_bar = np.zeros(nelem)

    if plasticity_flag == "nonlinear_isotropic" or plasticity_flag == "combined_hardening":
      q_trial = - (sigma_inf - sigma_u) * (1 - np.exp(- delta * xi)) - K * xi
      q_bar_trial = np.full(nelem, -np.dot(H, xi_bar))
      # q_bar_trial = -H * xi_bar
    else:
      q_trial = np.full(nelem, -np.dot(K, xi))
      # q_trial = -K * xi
      q_bar_trial = np.full(nelem, -np.dot(H, xi_bar))
      # q_bar_trial = -H * xi_bar

    xi_current = xi.copy()
    xi_bar_current = xi_bar.copy()

    for idx, (i, j) in enumerate(input_data['element']):
        n1c, n2c = get_element_node_coords(idx, input_data)
        h = n2c - n1c
        B = np.array([[-1/h, 1/h]])
        eps_total[idx] = np.dot(B, [u[i], u[j]])[0]
        eps_elastic[idx] = eps_total[idx] - eps_plastic_current[idx]

        sigma_trial[idx] = E * eps_elastic[idx]

        #f trial
        # perfect plasticity
        if plasticity_flag == "perfect_plasticity":
          f_trial[idx] = np.abs(sigma_trial[idx]) - sigma_u
        # linear isotropic hardening
        elif plasticity_flag == "linear_isotropic" or plasticity_flag == "linear_kinematic" or plasticity_flag == "nonlinear_isotropic" or plasticity_flag == "combined_hardening":
          f_trial[idx] = np.abs(sigma_trial[idx] - q_bar_trial[idx]) - sigma_u + q_trial[idx]

        print('@@@@@@@@@@@@@@@@@@@')
        print (f_trial[idx])
        print('@@@@@@@@@@@@@@@@@@@')

        if f_trial[idx] <= 0:
          sigma_new[idx] = sigma_trial[idx]
          Eeptang[idx] = E
        else:
          if is_time_dependent:
            if plasticity_flag == "nonlinear_isotropic" or plasticity_flag == "combined_hardening":
              print ('***********************************************************')
              gamma[idx], Eeptang[idx], q[idx] = newton_raphson_plasticity(f_trial[idx], xi[idx], E, K, H, eta, deltat, sigma_inf, sigma_u, delta, 1e-8, 50, is_time_dependent, q_trial[idx])
            else:
              print ('---------------------------------------------------------')
              gamma[idx] = ((E + K + H + (eta/deltat))**-1 ) * f_trial[idx]
              Eeptang[idx] = E * (1 - E * (E + K + H + (eta/deltat))**-1)
          else:
            if plasticity_flag == "nonlinear_isotropic" or plasticity_flag == "combined_hardening":
              print ('***********************************************************')
              gamma[idx], Eeptang[idx], q[idx] = newton_raphson_plasticity(f_trial[idx], xi[idx], E, K, H, eta, deltat, sigma_inf, sigma_u, delta, 1e-8, 50, is_time_dependent, q_trial[idx])
            else:
              gamma[idx] = ((E + K + H)**-1 ) * f_trial[idx]
              Eeptang[idx] = E * (1 - E * (E + K + H)**-1)

          #---------------------------------------------------------------------------------------------------#
          eps_plastic[idx] = eps_plastic_current[idx] + gamma[idx] * np.sign(sigma_trial[idx]- q_bar_trial[idx])
          xi[idx] = xi_current[idx] + gamma[idx]
          xi_bar[idx] = xi_bar_current[idx] - gamma[idx] * np.sign(sigma_trial[idx] - q_bar_trial[idx])
          #---------------------------------------------------------------------------------------------------#

          #---------------------------------------------------------------------------------------------------#
          sigma_new[idx] = sigma_trial[idx] - (gamma[idx] * E * np.sign(sigma_trial[idx] - q_bar_trial[idx]))
          if plasticity_flag not in ["nonlinear_isotropic", "combined_hardening"]:
            q[idx] = q_trial[idx] - gamma[idx] * K
          q_bar[idx] = q_bar_trial[idx] + gamma[idx] * H * np.sign(sigma_trial[idx] - q_bar_trial[idx])
          #---------------------------------------------------------------------------------------------------#

        A = get_A_value((n1c + n2c) / 2, L)
        f_int = A * h * np.dot(B.T, sigma_new[idx])
        f_int_global[i] += f_int[0]
        f_int_global[j] += f_int[1]

    return  eps_plastic, xi, xi_bar, Eeptang, f_int_global, eps_total, sigma_new, gamma

# ------------------------------ Helper Functions ------------------------------ #
def disp_func(t, T, m=2, um=0.005):
    return um * np.sin((m * np.pi * t) / T)

def get_element_node_coords(element_id, input_data):
    node1_id = input_data['element'][element_id, 0]
    node2_id = input_data['element'][element_id, 1]
    return input_data['coordinates'][node1_id], input_data['coordinates'][node2_id]

def get_A_value(x_val, L):
    if x_val < 0.4 * L:
        return 0.01
    elif 0.4 * L <= x_val <= 0.6 * L:
        return 0.001
    else:
        return 0.01

def K_Assem(input_data, u, Eep):
    n_nodes = len(input_data['nodes'])
    K_global = np.zeros((n_nodes, n_nodes))

    for elem in range(input_data['nelem']):
        n1c, n2c = get_element_node_coords(elem, input_data)
        midpt = (n1c + n2c) / 2
        h = n2c - n1c
        A = get_A_value(midpt, input_data['L'])
        B = np.array([[-1/h, 1/h]])
        element_dofs = input_data['dofs_element'][elem]
        K_elem = A * Eep[elem] * np.dot(B.T, B) * h
        for i, dof_i in enumerate(element_dofs):
            for j, dof_j in enumerate(element_dofs):
                K_global[dof_i, dof_j] += K_elem[i, j]

    return K_global

def run_analysis(input_data, is_time_dependent, plasticity_case):
  # ------------------------------ Main Solver ------------------------------ #
  # input_data = GetInput()
  num_nodes = len(input_data['nodes'])
  fixed_nodes = input_data['fixed_nodes']
  free_nodes = list(set(range(num_nodes)) - set(fixed_nodes))

  u = np.zeros(num_nodes)
  f_ext = np.zeros(num_nodes)
  eps_phistory = np.zeros(input_data['nelem'])
  eps_plastic = np.zeros(input_data['nelem'])
  # eps_plastic = np.full(input_data['nelem'], 0.0001)
  gamma_history = np.zeros(input_data['nelem'])
  xi_history = np.zeros(input_data['nelem'])
  xi_bar_history = np.zeros(input_data['nelem'])
  q_history = np.zeros(input_data['nelem'])
  q_bar_history = np.zeros(input_data['nelem'])
  f_trial = np.zeros(input_data['nelem'])
  xi = np.zeros(input_data['nelem'])
  xi_bar = np.zeros(input_data['nelem'])
  K = input_data['K']
  H = input_data['H']
  E = input_data['E']
  eta = input_data['eta']

  eps_history = []
  sigma_history = []
  gamma_history = []
  eps_phistory = []
  xi_history = []
  xi_bar_history = []
  q_history = []
  q_bar_history = []
  u_history = [u.copy()]
  residual_history = []
  time_steps = np.arange(0, input_data['T'] + input_data['delt'], input_data['delt'])


  # Set flags based on user input
  if plasticity_case == 1:
      plasticity_flag = "perfect_plasticity"
      E = E
      K = 0
      H = 0
  elif plasticity_case == 2:
      plasticity_flag = "linear_isotropic"
      E = E
      K = K
      H = 0
  elif plasticity_case == 3:
      plasticity_flag = "nonlinear_isotropic"
      E = E
      K = K
      H = 0
  elif plasticity_case == 4:
      plasticity_flag = "linear_kinematic"
      E = E
      K = 0
      H = H
  elif plasticity_case == 5:
      plasticity_flag = "combined_hardening"
      E = E
      K = K
      H = H
  else:
      print("Invalid plasticity case selected. Using default (Perfect Plasticity).")
      plasticity_flag = "perfect_plasticity"

  max_iter = 10
  tol = 1e-8

  for t in time_steps:
      print('--------------------------------------------------------------------------------------------------------------')
      print(f'\nTime: {t:.2f}')
      u[-1] = disp_func(t, input_data['T'])
      residuals = []

      for iteration in range(max_iter):
          eps_plastic, xi, xi_bar, Eeptang, f_int, eps, sigma, gamma = update_plasticity_consistent(u, E, K, H, eps_plastic, xi, xi_bar, input_data, is_time_dependent, plasticity_flag)

          K_MAT = K_Assem(input_data, u, Eeptang)
          print(f_int)
          R = -f_int[free_nodes]
          residual = np.linalg.norm(R)
          residuals.append(residual)
          print(f'Iteration {iteration + 1}, Residual: {residual:.2e}')

          if residual < tol:
              print(f'Converged at t = {t:.2f} after {iteration + 1} iterations')
              break

          du = np.linalg.solve(K_MAT[np.ix_(free_nodes, free_nodes)], R)
          u[free_nodes] += du

      eps_history.append(eps.copy())
      eps_phistory.append(eps_plastic.copy())
      gamma_history.append(gamma.copy())
      sigma_history.append(sigma.copy())
      xi_history.append(xi.copy())
      xi_bar_history.append(xi_bar.copy())
      u_history.append(u.copy())
      residual_history.append(residuals)

  # Identify midpoint element index
  mid_elem = input_data['nelem'] // 2

  # Extract stress and plastic strain over time at midpoint
  stress_mid = [sigma[mid_elem] for sigma in sigma_history]
  plastic_strain_mid = [eps_phistory[i][mid_elem] for i in range(len(eps_phistory))]
  strain_mid = [eps[mid_elem] for eps in eps_history]

  return time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history

# ------------------------------ Plot Convergence ------------------------------ #

# Prompt for time dependency
time_dependent = input("Is the analysis time-dependent? (yes/no): ")
is_time_dependent = time_dependent.lower() == 'yes'

# Prompt for plasticity case
plasticity_case = int(input("Select plasticity case:\n1) Perfect Plasticity\n2) Linear Isotropic Hardening\n3) Nonlinear Isotropic Hardening\n4) Linear Kinematic Hardening\n5) Nonlinear Isotropic and Linear Kinematic Hardening\nEnter your choice (1-5): "))


fig1, ax1 = plt.subplots(figsize=(8, 6))  # Create figure and axes for Stress vs Time
fig2, ax2 = plt.subplots(figsize=(8, 6))  # Create figure and axes for Plasticity vs Time
fig3, ax3 = plt.subplots(figsize=(8, 6))  # Create figure and axes for Stress vs Strain
fig4, ax4 = plt.subplots(figsize=(8, 6))  # Create figure and axes for Displacement vs Time



input_data1, input_sets = GetInput()

# Conditional loop based on time dependency
if is_time_dependent:
    # Run for all input sets
    for i, input_set in enumerate(input_sets):
        input_data, _ = GetInput()  # Get the base input data
        input_data.update(input_set)  # Update with the current input set
        time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent, plasticity_case)
        # Plot the data for this input set
        ax1.plot(time_steps, stress_mid, label=f"Input Set {i + 1}")
        ax2.plot(time_steps, plastic_strain_mid, label=f"Input Set {i + 1}")
        ax3.plot(strain_mid, stress_mid, label=f"Input Set {i + 1}")
        ax4.plot(time_steps, [u[-1] for u in u_history[:-1]], label=f"Input Set {i + 1}")  # Plot displacement of the last node

else:
    # Run only for the first input set
    input_data, _ = GetInput()  # Get the base input data
    input_data.update(input_sets[0])  # Update with the first input set
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent, plasticity_case)
    # Plot the data for the first input set
    ax1.plot(time_steps, stress_mid, label="Input Set 1")
    ax2.plot(time_steps, plastic_strain_mid, label="Input Set 1")
    ax3.plot(strain_mid, stress_mid, label="Input Set 1")
    ax4.plot(time_steps, [u[-1] for u in u_history[:-1]], label="Input Set 1")  # Plot displacement of the last node


# Set titles, labels, and legends
ax1.set_xlabel("Time [s]")
ax1.set_ylabel("Stress σₓₓ [MPa]")
ax1.set_title("Stress vs Time at Midpoint")
ax1.legend()
ax1.grid(True)

ax2.set_xlabel("Time [s]")
ax2.set_ylabel("Plastic Strain εₚ")
ax2.set_title("Plasticity vs Time at Midpoint")
ax2.legend()
ax2.grid(True)

ax3.set_xlabel("Axial Strain εₓₓ")
ax3.set_ylabel("Axial Stress σₓₓ [MPa]")
ax3.set_title("Stress-Strain Response")
ax3.legend()
ax3.grid(True)

ax4.set_xlabel("Time [s]")
ax4.set_ylabel("Displacement [m]")
ax4.set_title("Displacement vs. Time")
ax4.legend()
ax4.grid(True)

plt.show()

# Perfect Plasticity (Case 1)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=1)

plt.figure(figsize=(8, 6))
plt.plot(strain_mid, stress_mid, label="Perfect Plasticity")
plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Perfect Plasticity")
plt.legend()
plt.grid(True)
plt.show()

# Time-Dependent Perfect Plasticity - Varying eta
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0 # Ensuring perfect plasticity K=0, H=0
input_data['H'] = 0
# Varying eta (Viscosity Parameter)
eta_values = [1e9, 5e9, 1e10]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=1)
    plt.plot(strain_mid, stress_mid, label=f"eta = {eta:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Time-Dependent Perfect Plasticity (Varying eta)")
plt.legend()
plt.grid(True)
plt.show()

# Time-Dependent Perfect Plasticity - Varying T
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0 # Ensuring perfect plasticity K=0, H=0
input_data['H'] = 0
# Varying T (Total Time)
T_values = [0.5, 1.0, 2.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=1)
    plt.plot(strain_mid, stress_mid, label=f"T = {T}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Time-Dependent Perfect Plasticity (Varying T)")
plt.legend()
plt.grid(True)
plt.show()

# Time-Dependent Perfect Plasticity - Varying eta - Stress vs. Time
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring perfect plasticity K=0, H=0
input_data['H'] = 0
# Varying eta (Viscosity Parameter)
eta_values = [1e9, 5e9, 1e10]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=1)
    plt.plot(time_steps, stress_mid, label=f"eta = {eta:.0e}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Time-Dependent Perfect Plasticity (Varying eta)")
plt.legend()
plt.grid(True)
plt.show()

# Time-Dependent Perfect Plasticity - Varying T - Stress vs. Time
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring perfect plasticity K=0, H=0
input_data['H'] = 0
# Varying T (Total Time)
T_values = [1.0, 5.0, 50.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=1)
    plt.plot(time_steps, stress_mid, label=f"T = {T}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Time-Dependent Perfect Plasticity (Varying T)")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Linear Isotropic Hardening (Case 2)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0 # Ensuring Isotropic hardening H=0
time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=2)

plt.figure(figsize=(8, 6))
plt.plot(strain_mid, stress_mid, label="Linear Isotropic Hardening")
plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Linear Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of K on Rate-Independent Isotropic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0 # Ensuring Isotropic hardening H=0
# Varying K (Isotropic Hardening Modulus)
K_values = [2e10, 5e10, 1e11]  # Example K values
plt.figure(figsize=(8, 6))
for K in K_values:
    input_data['K'] = K
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=2)
    plt.plot(strain_mid, stress_mid, label=f"K = {K:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of K on Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of Viscosity Parameter on Rate-Dependent Isotropic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0 # Ensuring Isotropic hardening H=0
# Varying eta (Viscosity Parameter)
eta_values = [1e9, 5e9, 1e10]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=2)
    plt.plot(strain_mid, stress_mid, label=f"eta = {eta:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of Viscosity on Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of T on Rate-Dependent Isotropic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0 # Ensuring Isotropic hardening H=0
# Varying T (Total Time)
T_values = [1.0, 10.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=2)
    plt.plot(strain_mid, stress_mid, label=f"T = {T}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of T on Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of Viscosity Parameter on Rate-Dependent Isotropic Hardening (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0 # Ensuring Isotropic hardening H=0
# Varying eta (Viscosity Parameter)
eta_values = [1e9, 5e9, 1e10]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=2)
    plt.plot(time_steps, stress_mid, label=f"eta = {eta:.0e}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Effect of Viscosity on Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Linear Isotropic Hardening - Varying T (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0

# Varying T (Total Time)
T_values = [0.5, 1.0, 2.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=2)
    plt.plot(time_steps, stress_mid, label=f"T = {T}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Linear Isotropic Hardening (Varying T)")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Nonlinear Isotropic Hardening (Case 3)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0
time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=3)

plt.figure(figsize=(8, 6))
plt.plot(strain_mid, stress_mid, label="Nonlinear Isotropic Hardening")
plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Nonlinear Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Nonlinear Isotropic Hardening - Varying delta (Stress vs. Strain)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0

# Varying delta (Exponential Hardening Parameter)
delta_values = [50, 100, 200]  # Example delta values
plt.figure(figsize=(8, 6))
for delta in delta_values:
    input_data['delta'] = delta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=3)
    plt.plot(strain_mid, stress_mid, label=f"delta = {delta}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Nonlinear Isotropic Hardening (Varying delta)")
plt.legend()
plt.grid(True)
plt.show()

# %%
# ------------------------------ Input & Mesh ------------------------------ #
def GetInput():
    L = 1
    nelem = 5
    x = np.linspace(0, L, nelem + 1)
    geom_Le = np.full(nelem, L / nelem)
    coordinates = np.concatenate(([0], np.cumsum(geom_Le)))
    nodes = np.arange(0, nelem + 1)
    dofs = nodes.copy()
    element = np.column_stack((np.arange(0, nelem), np.arange(1, nelem + 1)))
    dofs_element = element.copy()
    fixed_nodes = [0, len(nodes) - 1]
    T = 1
    delt = 0.001

    input_sets = [
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 0,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e10,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        }
        # {
        #     'E': 70000e6, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'delta': 150, 'sigma_u': 200e6, 'sigma_inf': 2e9
        # },
        # {
        #     'E': 2.1e11, 'K': 50000, 'H': 50000, 'eta': 5e9,
        #     'delta': 20000, 'sigma_u': 200e6, 'sigma_inf': 350e6
        # },
        # {
        #     'E': 2.1e11, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 150
        # }
    ]

    input_data = {
        'L': L, 'nelem': nelem, 'x': x, 'geom_Le': geom_Le, 'nodes': nodes,
        'dofs': dofs, 'coordinates': coordinates, 'element': element,
        'dofs_element': dofs_element, 'E': input_sets[0]['E'], 'T': T, 'delt': delt,
        'fixed_nodes': fixed_nodes, 'sigma_u': input_sets[0]['sigma_u'],
        'K': input_sets[0]['K'], 'H': input_sets[0]['H'], 'eta': input_sets[0]['eta'],
        'sigma_inf': input_sets[0]['sigma_inf'], 'delta': input_sets[0]['delta']
    }

    return input_data, input_sets

# Effect of Viscosity Parameter on Rate-Dependent Nonlinear Isotropic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0
# Varying eta (Viscosity Parameter)
eta_values = [5e12, 10e12, 20e12]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=3)
    plt.plot(strain_mid, stress_mid, label=f"eta = {eta:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of Viscosity on Nonlinear Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# %%
# ------------------------------ Input & Mesh ------------------------------ #
def GetInput():
    L = 1
    nelem = 5
    x = np.linspace(0, L, nelem + 1)
    geom_Le = np.full(nelem, L / nelem)
    coordinates = np.concatenate(([0], np.cumsum(geom_Le)))
    nodes = np.arange(0, nelem + 1)
    dofs = nodes.copy()
    element = np.column_stack((np.arange(0, nelem), np.arange(1, nelem + 1)))
    dofs_element = element.copy()
    fixed_nodes = [0, len(nodes) - 1]
    T = 1
    delt = 0.001

    input_sets = [
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 0,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e10,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        }
        # {
        #     'E': 70000e6, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'delta': 150, 'sigma_u': 200e6, 'sigma_inf': 2e9
        # },
        # {
        #     'E': 2.1e11, 'K': 50000, 'H': 50000, 'eta': 5e9,
        #     'delta': 20000, 'sigma_u': 200e6, 'sigma_inf': 350e6
        # },
        # {
        #     'E': 2.1e11, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 150
        # }
    ]

    input_data = {
        'L': L, 'nelem': nelem, 'x': x, 'geom_Le': geom_Le, 'nodes': nodes,
        'dofs': dofs, 'coordinates': coordinates, 'element': element,
        'dofs_element': dofs_element, 'E': input_sets[0]['E'], 'T': T, 'delt': delt,
        'fixed_nodes': fixed_nodes, 'sigma_u': input_sets[0]['sigma_u'],
        'K': input_sets[0]['K'], 'H': input_sets[0]['H'], 'eta': input_sets[0]['eta'],
        'sigma_inf': input_sets[0]['sigma_inf'], 'delta': input_sets[0]['delta']
    }

    return input_data, input_sets
# Effect of Viscosity Parameter on Rate-Dependent Nonlinear Isotropic Hardening (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0
# Varying eta (Viscosity Parameter)
eta_values = [5e12, 10e12, 20e12]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=3)
    plt.plot(time_steps, stress_mid, label=f"eta = {eta:.0e}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Effect of Viscosity on Nonlinear Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# %%
# %%
# %%
# ------------------------------ Input & Mesh ------------------------------ #
def GetInput():
    L = 1
    nelem = 5
    x = np.linspace(0, L, nelem + 1)
    geom_Le = np.full(nelem, L / nelem)
    coordinates = np.concatenate(([0], np.cumsum(geom_Le)))
    nodes = np.arange(0, nelem + 1)
    dofs = nodes.copy()
    element = np.column_stack((np.arange(0, nelem), np.arange(1, nelem + 1)))
    dofs_element = element.copy()
    fixed_nodes = [0, len(nodes) - 1]
    T = 1
    delt = 0.001

    input_sets = [
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e12,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e10,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        }
        # {
        #     'E': 70000e6, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'delta': 150, 'sigma_u': 200e6, 'sigma_inf': 2e9
        # },
        # {
        #     'E': 2.1e11, 'K': 50000, 'H': 50000, 'eta': 5e9,
        #     'delta': 20000, 'sigma_u': 200e6, 'sigma_inf': 350e6
        # },
        # {
        #     'E': 2.1e11, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 150
        # }
    ]

    input_data = {
        'L': L, 'nelem': nelem, 'x': x, 'geom_Le': geom_Le, 'nodes': nodes,
        'dofs': dofs, 'coordinates': coordinates, 'element': element,
        'dofs_element': dofs_element, 'E': input_sets[0]['E'], 'T': T, 'delt': delt,
        'fixed_nodes': fixed_nodes, 'sigma_u': input_sets[0]['sigma_u'],
        'K': input_sets[0]['K'], 'H': input_sets[0]['H'], 'eta': input_sets[0]['eta'],
        'sigma_inf': input_sets[0]['sigma_inf'], 'delta': input_sets[0]['delta']
    }

    return input_data, input_sets
# Effect of T on Rate-Dependent Nonlinear Isotropic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0
# Varying T (Total Time)
T_values = [1.0, 10.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=3)
    plt.plot(strain_mid, stress_mid, label=f"T = {T}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of T on Nonlinear Isotropic Hardening")
plt.legend()
plt.grid(True)
plt.show()



# %%
# %%
# %%
# ------------------------------ Input & Mesh ------------------------------ #
def GetInput():
    L = 1
    nelem = 5
    x = np.linspace(0, L, nelem + 1)
    geom_Le = np.full(nelem, L / nelem)
    coordinates = np.concatenate(([0], np.cumsum(geom_Le)))
    nodes = np.arange(0, nelem + 1)
    dofs = nodes.copy()
    element = np.column_stack((np.arange(0, nelem), np.arange(1, nelem + 1)))
    dofs_element = element.copy()
    fixed_nodes = [0, len(nodes) - 1]
    T = 1
    delt = 0.001

    input_sets = [
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e12,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e10,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        }
        # {
        #     'E': 70000e6, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'delta': 150, 'sigma_u': 200e6, 'sigma_inf': 2e9
        # },
        # {
        #     'E': 2.1e11, 'K': 50000, 'H': 50000, 'eta': 5e9,
        #     'delta': 20000, 'sigma_u': 200e6, 'sigma_inf': 350e6
        # },
        # {
        #     'E': 2.1e11, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 150
        # }
    ]

    input_data = {
        'L': L, 'nelem': nelem, 'x': x, 'geom_Le': geom_Le, 'nodes': nodes,
        'dofs': dofs, 'coordinates': coordinates, 'element': element,
        'dofs_element': dofs_element, 'E': input_sets[0]['E'], 'T': T, 'delt': delt,
        'fixed_nodes': fixed_nodes, 'sigma_u': input_sets[0]['sigma_u'],
        'K': input_sets[0]['K'], 'H': input_sets[0]['H'], 'eta': input_sets[0]['eta'],
        'sigma_inf': input_sets[0]['sigma_inf'], 'delta': input_sets[0]['delta']
    }

    return input_data, input_sets
# Linear Isotropic Hardening - Varying T (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0

# Varying T (Total Time)
T_values = [0.5, 1.0, 2.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=3)
    plt.plot(time_steps, stress_mid, label=f"T = {T}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time -  Effect of T on Non - Linear Isotropic Hardening (Varying T)")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Linear Kinematic Hardening (Case 4)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring Kinematic hardening K=0
time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=4)

plt.figure(figsize=(8, 6))
plt.plot(strain_mid, stress_mid, label="Linear Kinematic Hardening")
plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Linear Kinematic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of H on Rate-Independent Linear Kinematic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring Kinematic hardening K=0
# Varying H (Kinematic Hardening Modulus)
H_values = [1e9, 5e9, 1e10]  # Example H values
plt.figure(figsize=(8, 6))
for H in H_values:
    input_data['H'] = H
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=4)
    plt.plot(strain_mid, stress_mid, label=f"H = {H:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of H on Linear Kinematic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of Viscosity Parameter on Rate-Dependent Linear Kinematic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring Kinematic hardening K=0
# Varying eta (Viscosity Parameter)
eta_values = [1e9, 5e9, 1e10]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=4)
    plt.plot(strain_mid, stress_mid, label=f"eta = {eta:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of Viscosity on Linear Kinematic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of Viscosity Parameter on Rate-Dependent Linear Kinematic Hardening (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring Kinematic hardening K=0
# Varying eta (Viscosity Parameter)
eta_values = [1e9, 5e9, 1e10]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=4)
    plt.plot(time_steps, stress_mid, label=f"eta = {eta:.0e}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Effect of Viscosity on Linear Kinematic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of T on Rate-Dependent Linear Kinematic Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring Kinematic hardening K=0
# Varying T (Total Time)
T_values = [1.0, 10.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=4)
    plt.plot(strain_mid, stress_mid, label=f"T = {T}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of T on Linear Kinematic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of Viscosity Parameter on Rate-Dependent Linear Kinematic Hardening (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['K'] = 0  # Ensuring Kinematic hardening K=0
# Varying eta (Viscosity Parameter)
eta_values = [1e9, 5e9, 1e10]  # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=4)
    plt.plot(time_steps, stress_mid, label=f"eta = {eta:.0e}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Effect of Viscosity on Linear Kinematic Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# %%
# %%
# ------------------------------ Input & Mesh ------------------------------ #
def GetInput():
    L = 1
    nelem = 5
    x = np.linspace(0, L, nelem + 1)
    geom_Le = np.full(nelem, L / nelem)
    coordinates = np.concatenate(([0], np.cumsum(geom_Le)))
    nodes = np.arange(0, nelem + 1)
    dofs = nodes.copy()
    element = np.column_stack((np.arange(0, nelem), np.arange(1, nelem + 1)))
    dofs_element = element.copy()
    fixed_nodes = [0, len(nodes) - 1]
    T = 1
    delt = 0.001

    input_sets = [
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e10,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        }
        # {
        #     'E': 70000e6, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'delta': 150, 'sigma_u': 200e6, 'sigma_inf': 2e9
        # },
        # {
        #     'E': 2.1e11, 'K': 50000, 'H': 50000, 'eta': 5e9,
        #     'delta': 20000, 'sigma_u': 200e6, 'sigma_inf': 350e6
        # },
        # {
        #     'E': 2.1e11, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 150
        # }
    ]

    input_data = {
        'L': L, 'nelem': nelem, 'x': x, 'geom_Le': geom_Le, 'nodes': nodes,
        'dofs': dofs, 'coordinates': coordinates, 'element': element,
        'dofs_element': dofs_element, 'E': input_sets[0]['E'], 'T': T, 'delt': delt,
        'fixed_nodes': fixed_nodes, 'sigma_u': input_sets[0]['sigma_u'],
        'K': input_sets[0]['K'], 'H': input_sets[0]['H'], 'eta': input_sets[0]['eta'],
        'sigma_inf': input_sets[0]['sigma_inf'], 'delta': input_sets[0]['delta']
    }

    return input_data, input_sets
# Linear Isotropic Hardening - Varying T (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
input_data['H'] = 0  # Ensuring Isotropic hardening H=0

# Varying T (Total Time)
T_values = [0.5, 1.0, 2.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=4)
    plt.plot(time_steps, stress_mid, label=f"T = {T}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Linear Kinematic Hardening (Varying T)")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Combined Hardening (Case 5)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=5)

plt.figure(figsize=(8, 6))
plt.plot(strain_mid, stress_mid, label="Combined Hardening")
plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Combined Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of K on Rate-Independent Combined Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
# Varying K (Isotropic Hardening Modulus)
K_values = [2e10, 5e10, 1e11]  # Example K values
plt.figure(figsize=(8, 6))
for K in K_values:
    input_data['K'] = K
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=5)
    plt.plot(strain_mid, stress_mid, label=f"K = {K:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of K on Combined Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of Viscosity Parameter on Rate-Dependent Combined Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
# Varying eta (Viscosity Parameter)
eta_values = [5e12, 10e12, 20e12]   # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=5)
    plt.plot(strain_mid, stress_mid, label=f"eta = {eta:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of Viscosity on Combined Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# ------------------------------ Input & Mesh ------------------------------ #
def GetInput():
    L = 1
    nelem = 5
    x = np.linspace(0, L, nelem + 1)
    geom_Le = np.full(nelem, L / nelem)
    coordinates = np.concatenate(([0], np.cumsum(geom_Le)))
    nodes = np.arange(0, nelem + 1)
    dofs = nodes.copy()
    element = np.column_stack((np.arange(0, nelem), np.arange(1, nelem + 1)))
    dofs_element = element.copy()
    fixed_nodes = [0, len(nodes) - 1]
    T = 1
    delt = 0.001

    input_sets = [
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e12,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 1e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e9,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        },
        {
            'E': 2.1e11, 'K': 2e10, 'H': 1e9, 'eta': 5e10,
            'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 100
        }
        # {
        #     'E': 70000e6, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'delta': 150, 'sigma_u': 200e6, 'sigma_inf': 2e9
        # },
        # {
        #     'E': 2.1e11, 'K': 50000, 'H': 50000, 'eta': 5e9,
        #     'delta': 20000, 'sigma_u': 200e6, 'sigma_inf': 350e6
        # },
        # {
        #     'E': 2.1e11, 'K': 5e10, 'H': 1e10, 'eta': 5e10,
        #     'sigma_u': 4.2e8, 'sigma_inf': 2e9, 'delta': 150
        # }
    ]

    input_data = {
        'L': L, 'nelem': nelem, 'x': x, 'geom_Le': geom_Le, 'nodes': nodes,
        'dofs': dofs, 'coordinates': coordinates, 'element': element,
        'dofs_element': dofs_element, 'E': input_sets[0]['E'], 'T': T, 'delt': delt,
        'fixed_nodes': fixed_nodes, 'sigma_u': input_sets[0]['sigma_u'],
        'K': input_sets[0]['K'], 'H': input_sets[0]['H'], 'eta': input_sets[0]['eta'],
        'sigma_inf': input_sets[0]['sigma_inf'], 'delta': input_sets[0]['delta']
    }

    return input_data, input_sets
# Effect of T on Rate-Dependent Combined Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
# Varying T (Total Time)
T_values = [1.0, 10.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=5)
    plt.plot(strain_mid, stress_mid, label=f"T = {T}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of T on Combined Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of Viscosity Parameter on Rate-Dependent Combined Hardening (Stress vs. Time)
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
# Varying eta (Viscosity Parameter)
eta_values = [5e12, 10e12, 20e12]   # Example eta values
plt.figure(figsize=(8, 6))
for eta in eta_values:
    input_data['eta'] = eta
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=5)
    plt.plot(time_steps, stress_mid, label=f"eta = {eta:.0e}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Effect of Viscosity on Combined Hardening")
plt.legend()
plt.grid(True)
plt.show()

# %%
# Effect of H on Rate-Independent Combined Hardening
input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set
# Varying H (Kinematic Hardening Modulus)
H_values = [1e9, 5e9, 1e10]  # Example H values
plt.figure(figsize=(8, 6))
for H in H_values:
    input_data['H'] = H  # Update H for each iteration
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=False, plasticity_case=5)
    plt.plot(strain_mid, stress_mid, label=f"H = {H:.0e}")

plt.xlabel("Axial Strain εₓₓ")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress-Strain Response - Effect of H on Combined Hardening")
plt.legend()
plt.grid(True)
plt.show()

input_data, input_sets = GetInput()
input_data.update(input_sets[0])  # Use the first input set

# Varying T (Total Time)
T_values = [0.5, 1.0, 2.0]  # Example T values
plt.figure(figsize=(8, 6))
for T in T_values:
    input_data['T'] = T
    time_steps, stress_mid, plastic_strain_mid, strain_mid, u_history = run_analysis(input_data, is_time_dependent=True, plasticity_case=5)
    plt.plot(time_steps, stress_mid, label=f"T = {T}")  # Plot stress vs. time

plt.xlabel("Time [s]")
plt.ylabel("Axial Stress σₓₓ [MPa]")
plt.title("Stress vs. Time - Effect of T on Combined Hardening (Varying T)")
plt.legend()
plt.grid(True)
plt.show()